java异常处理机制
Throwable类
java中异常的顶极父类
在其下有两个子类
1.Error: jvm系统级别的错误
         例如:栈内存溢出等
        
2.Exception:程序级别的错误 
          可以通过捕获机制来解决

try语句
try{
 可能出现异常的代码片段
}
try语句用来包围可能出现异常的代码片段
try是发现问题的语句

catch语句
catch(Exception_Type e){
 解决问题的代码片段
}
catch语句是用来捕获try语句中出现的异常并针对该异常解决的.
catch语句可以出现多次

throw语句
throw e:
throw用来主动抛出某一个异常的实例
通常遇到以下情况会主动抛出异常：
1.我们定义的方法在运行过程中出现了错误，而这个错误
  如何解决应该由调用者决定时，我们会将异常抛出
  
2.当我们遇到一个不符合业务逻辑的操作时我们可以
  把它当作一个异常去处理而主动抛出

throws声明
我们定义的方法中可能会出现错误，无论是否为我们主动抛出的，
但只要是方法中出现的异常不在方法中处理的，我们通常在声明
方法时同时声明可能会抛出的异常，通知调用者必须捕获。

finally块
finally{
  代码片段
}
finally出现在try-catch语句的最后
finally块中的语句是必然执行的，无论try中是否出现异常

重写方法时的异常处理
若父类方法中通过throws声明了某些异常的抛出，那么
1.子类重写时可以不声明throws
2.子类重写时可以抛出父类抛出的异常的子类异常
  例如：
    父类方法throws RuntimeException
    子类可以throws NullPointerException
3.子类重写时可以只抛出父类抛出的部分异常

但是不能：
1.子类重写时不能抛出父类方法中没有抛出的额外异常的父类异常
2.子类重写是不能抛出父类方法中抛出异常的父类异常

Java对操作系统中文件系统的支持
File类
用于描述操作系统中的一个文件或目录
通过File我们可以得知文件的名字，大小，修改时间等信息。但是不能读取文件的内容






































