int[] array = new int[10];
array[0];

数组的弊端：
 1.数组需要定义长度，这在不知道数据量的前提下使用是
  比较麻烦的，因为要频繁的对数组进行扩容。
 2.当向数组中插入元素时，其余元素要向后移动，这也为我们
   使用数组提供了额外的维护数组的代码量
 
java中的集合框架
Collection接口
该接口定义了集合的相关特征。

该接口派生了两个子接口
List:可重复集(同一个元素可以放入若干次)
     这里所谓同一个元素指的是equals为true
    有序集
    
Set:不可重复集()
    无序集

Collection定义的方法
int size():返回集合中的元素数量

boolean isEmpty():判断集合中是否为空集合

boolean contains(Object o):判断集合是否包含指定的元素

void clear():清空集合

boolean add(E e):向集合中添加元素

boolean remove(E e):从集合中删除指定元素

boolean addAll(Collection c):将指定集合中的所有元素添加到当前集合(并集)

boolean removeAll(Collection c):删除当前集合中与给定集合相同的元素

Iterator iterator():返回遍历数组的迭代器

List集合的实现类
ArrayList:内部使用数组实现的集合
LinkedList:使用链表方式实现的集合

List接口中定义的方法：
get(int index):获取指定位置的元素.
set(int index,Object obj):将指定位置上的元素替换为给定元素，返回被替换的元素。
add(int index,Object o):在指定位置插入给定的元素，原来的元素顺序向后移动 
remove(int index):删除指定位置的元素
indexOf(Object o):查找指定元素在集合中第一次出现的位置
lastIndexOf(Object o):查找给定元素在集合中最后一次出现的位置

Collection 定义的方法
toArray():将集合转换为指定的数组
/**
 * 转换时需要注意：
 * 1.参数给定的就是具体要转换的数组的实例，但不需要长度
 * 2.返回时要造型
 * 3.一定要注意，要转换的数组类型要和集合中存放的类型一致
 */

LinkedList 与 ArrayList
 
 ArrayList使用数组方式实现，根据数组的实现原理，这种集合
更适合查询数据，但是对频繁的增删元素而言，效率要低。
 
 LinkedList使用链表方式实现，根据链表的实现原理，这种集合
更适合增删元素，但是对于频繁的查询元素效率要低。

Iterator接口
迭代器
用于遍历集合元素
调用遍历集合时的相关方法
不同的集合有着不同的迭代器实现，我们无须记住每一种具体的迭代器，也不需要关心，
我们应该关心的是如何使用迭代器去遍历集合

该接口有三种常用方法：
boolean hasNext():是否还有元素可以获取
Object next():获取元素
void remove():删除当前迭代的元素

遍历集合的顺序要遵循:
问取删 删除可以不做

泛型
java1.5之后的另一个特性
泛型的本质就是参数化类型，在使用某个类是为方法、属性指定类型

集合中的泛型
集合中的泛型通常是约数集合中存放元素的类型























