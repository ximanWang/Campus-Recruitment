6 功能设计(动作，方法)
  下落功能设计
 (1) 获取键盘事件：绑定在下箭头按下时候执行下落动作
 (2) 在4格方块上添加下落动作(方法)
 (3) 调用界面的重绘方法，按照新数据(变化以后的行列数据)
   重新绘制界面 repaint(),repaint()会尽快调用paint方法
   
 1) 完善下落流程控制
  边界检查，着陆到墙上，消除满行并记分，游戏结束检查
  重合检查
  
  下落流程功能描述：
  1) 如果能下落(canDrop())就下落一步
  2) 如果不能下落就着陆到墙上
  3) 着陆以后要消除满行(destroyLines())并且记分
  4) 游戏结束检查(checkGameOver())
  5) 生成下一个方块
  
 下落功能：softDropAction()
   if(canDrop()){
   		tetromino.softDrop();
   }else{
   		landToWall();
   		destroyLines();
   		checkGameOver();
   		tetromino = nextOne;
   		nextOne = randomOne();
   }
  
 2) 旋转流程实现
   1) 处理键盘事件
   2) 执行旋转流程
     流程包括，先旋转，
     检测是否出界和重合
     转回去
              [0]   [1]  [2]  [3]
          State=(0,0,0,-1,0,1,1,0);
          State=(0,0,-1,0,1,0,0,-1);
          State=(0,0,0,1,0,-1,-1,0);
          State=(0,0,1,0,-1,0,0,1);
         没有格子相对于轴的相对位置旋转就是[0]->[1]
         就是取出[0]状态的轴0
         状态[1]
         如[0] (3,2)+S0 = [(3,2)(3,1)(3,3)(4,2)]
           [1] (3,2)+S1 = [(3,2)(2,2)(4,2)(3,1)]
           ...
         
         
         
     详细设计：在tetrimino类添加
     roateRight()
     roateLeft()
     Tetris上添加roateRightAction()
 3) 开始定时自动下落处理
 4) 暂停下落
 5) 继续下落
 6) 结束游戏
  
业务需求(清晰明确) -> 业务对象模型(理清对象关系) ->
数据建模(用数据表达对象，和对象的关系) -> 类的设计 -> 概要编码 -> 
详细功能设计(语法知识) -> 

1 明确业务需求
  用自然语言将业务功能描述清楚

关于软件调试(debug)
 1) 调试软件的前提是知道什么是正确的
    1.1) 正确的结果
    1.2)正确数据是什么
 2) 按照正确确定调试方案
    2.1) 找到实际运算时候的数据(println(data))
 3) 比较正确和错误数据，分析出错原因
    

 OOP 面向对象编程与俄罗斯方块项目实现过程
  核心原则：计算机只能处理数据计算
    程序：数据结构 + 算法 
           = 对输入数据的算法加工得到输出数据的过程

 OOP 是如何将业务过程(俄罗斯方块)转换为数据计算的方法

 面向对象的思考分析过程
 1) 根据业务的需求找到对象，分析对象之间的关系
 2) 利用合理的数据模型描述对象(解析几何课程) 
   可以将对象进行数量化，用数字来表达对象
 3) 类的设计，定义出类的属性(数据模型)
   以及对象之间的关系(用到了面向对象的语法知识)
   注意：要有面向对象的语法表达合理的逻辑关系
 4) 实现概要设计(概要编码)
 5) 详细功能实现
   详细数据结构设计
     墙的设计 二维数组
     4格方块的数据设计
 6) 界面绘制(利用Java Swing API绘制界面，贴图)
 7) 功能算法设计
   原则：一切功能(子功能)都是方法：动词就是方法
   实现策略：将功能映射到数学模型，研究数据变化规律
   找出算法测试。
   
  下落
  移动
  旋转：研究相对于轴的位置变化
  消行
  记分
  
 8) 事件绑定(利用Java Swing API实现事件的绑定)
 9) 调试：Debug
   最重要原则：知道理想数据输入和数据输出(通过数据模型)
   模拟计算得出，在找到软件实际计算的数据，比较两种不同，
   找出错误的原因。




3) 开始流程 Tetris上添加continueAction()
4) 















